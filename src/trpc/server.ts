import { createCaller, type AppRouter } from '@/server/api/root';
import { createTRPCContext } from '@/server/api/trpc';
import { getBaseUrl } from '@/trpc/React';
import { PrismaClient } from '@prisma/client';
import type { DefaultArgs } from '@prisma/client/runtime/library';
import type { QueryClient } from '@tanstack/react-query';
import { createHydrationHelpers } from '@trpc/react-query/rsc';
import { headers } from 'next/headers';
import { NextRequest } from 'next/server';
import { cache } from 'react';
import 'server-only';
import { createQueryClient } from './query-client';

/**
 * @typedef {Promise<Object>} ContextType
 * @property {NextRequest} req - Represents the incoming request, wrapping URL and headers for processing.
 * @property {Headers} resHeaders - Response headers to be manipulated for the outgoing response.
 * @property {PrismaClient<{ log: ('query' | 'warn' | 'error')[]; }, never, DefaultArgs>} db -
 *  Instance of PrismaClient with logging levels set to capture query, warning, and error logs.
 *
 * A promise-wrapped object representing context configuration for server-side requests,
 * including the request, response headers, and Prisma database instance.
 */

type ContextType = Promise<{
  req: NextRequest;
  resHeaders: Headers;
  db: PrismaClient<
    {
      log: ('query' | 'warn' | 'error')[];
    },
    never,
    DefaultArgs
  >;
}>;

/**
 * Generates a cached tRPC context object for handling API requests.
 *
 * @function createContext
 * @returns {ContextType} Context object wrapped in a promise for use in server-side requests.
 * @description Caches and returns the context used in handling server requests. This context includes:
 * - A modified `NextRequest` initialized with the base URL and specific headers.
 * - `resHeaders` with custom header values to track the tRPC request source.
 * - A tRPC context created via `createTRPCContext` containing request and response details.
 *
 * This setup is used widely in T3 stack applications to standardize request and response
 * handling across server-side functions, making it essential for seamless API interactions.
 *
 * @see {@link https://trpc.io/docs/server/context} for more details on setting up and using `createContext`
 * in tRPC-based applications within the T3 stack.
 */

const createContext = cache((): ContextType => {
  const heads = new Headers(headers());
  const req = new NextRequest(new URL(getBaseUrl() + '/api/trpc'), {
    headers: heads,
  });
  heads.set('x-trpc-source', 'rsc');

  return createTRPCContext({
    req,
    resHeaders: heads,
  });
});

/**
 * Provides a cached instance of `QueryClient` for managing server-side queries.
 *
 * @function getQueryClient
 * @returns {QueryClient} A singleton `QueryClient` instance, ensuring consistent and efficient query handling
 *   across server requests.
 * @description Utilizes caching to prevent redundant instantiation of `QueryClient`. This approach optimizes
 *   performance by reusing the `QueryClient` instance across multiple calls, which is beneficial for
 *   managing query state in server-side rendering environments.
 *
 * @see {@link https://tanstack.com/query/latest/docs/react/guides/ssr} for more details on server-side caching
 *   and query management with `QueryClient`.
 */

const getQueryClient: () => QueryClient = cache(createQueryClient);

/**
 * Initializes a caller instance for making tRPC calls with the specified context.
 *
 * @constant
 * @description Uses `createCaller` to generate a callable interface for tRPC procedures, configured
 *   with the provided server-side context. This `caller` instance enables seamless invocation of
 *   backend procedures within server components or API routes, using the context generated by
 *   `createContext`.
 *
 * The `caller` instance is particularly useful for direct interaction with tRPC procedures
 * on the server side without an HTTP request, leveraging the cached context for optimized performance.
 *
 * @see {@link https://trpc.io/docs/servers/callers} for more information on using `createCaller` with tRPC.
 */

const caller: ReturnType<typeof createCaller> = createCaller(createContext);

/**
 * @typedef {Object} HydrationHelperTypes
 * @property {ReturnType<typeof createHydrationHelpers<AppRouter>>['trpc']} trpc - An aliased tRPC client interface for invoking
 *   type-safe tRPC procedures within the client.
 * @property {ReturnType<typeof createHydrationHelpers<AppRouter>>['HydrateClient']} HydrateClient - A React component for managing
 *   React Query hydration, ensuring server-fetched data is accessible on the client side.
 *
 * Defines the structure of tRPC and hydration utilities for use in server-rendered applications, providing a type-safe interface
 * for both tRPC API calls and React Query hydration.
 */

type HydrationHelperTypes = {
  trpc: ReturnType<typeof createHydrationHelpers<AppRouter>>['trpc'];
  HydrateClient: ReturnType<
    typeof createHydrationHelpers<AppRouter>
  >['HydrateClient'];
};

/**
 * Provides tRPC API access and a hydration component for server-client data flow.
 *
 * @constant
 * @type {HydrationHelperTypes}
 * @description Exports:
 * - **`api`**: Aliased tRPC client interface, enabling type-safe tRPC procedure calls.
 * - **`HydrateClient`**: React component that synchronizes React Query data between server and client,
 *   handling data hydration after server-side rendering.
 *
 * These utilities are generated by `createHydrationHelpers` with `caller` and `getQueryClient`, supporting
 * SSR-based data fetching and hydration in Next.js applications.
 *
 * @see {@link https://trpc.io/docs/ssr} for more on SSR and hydration with tRPC.
 * @see {@link https://tanstack.com/query/v4/docs/react/guides/ssr} for React Query hydration documentation.
 */

export const { trpc: api, HydrateClient }: HydrationHelperTypes =
  createHydrationHelpers<AppRouter>(caller, getQueryClient);
